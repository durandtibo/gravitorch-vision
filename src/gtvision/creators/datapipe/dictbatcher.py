from __future__ import annotations

__all__ = ["DictBatcherIterDataPipeCreator"]

from collections.abc import Sequence
from typing import TypeVar

from gravitorch.data.datacreators import BaseDataCreator, setup_data_creator
from gravitorch.datapipes.iter import DictBatcher
from gravitorch.engines.base import BaseEngine
from gravitorch.utils.format import str_indent, str_pretty_dict
from torch import Tensor
from torch.utils.data import IterDataPipe, MapDataPipe

from gtvision.creators.datapipe.base import BaseDataPipeCreator

T = TypeVar("T")


class DictBatcherIterDataPipeCreator(BaseDataPipeCreator[T]):
    r"""Create a ``DictBatcher`` where the data is generated by a
    ``BaseDataCreator`` object.

    Args:
    ----
        data (``BaseDataCreator`` or ``dict``): Specifies the data
            creator or its configuration.
        **kwargs: See documentation of ``DictBatcher``

    Example usage:

    .. code-block:: pycon

        >>> import torch
        >>> from gravitorch.data.datacreators import DataCreator
        >>> from gtvision.creators.datapipe import DictBatcherIterDataPipeCreator
        >>> creator = DictBatcherIterDataPipeCreator(DataCreator({"key": torch.ones(6, 3)}))
        >>> creator.create()
    """

    def __init__(self, data: BaseDataCreator[dict[str, Tensor]] | dict, **kwargs) -> None:
        self._data = setup_data_creator(data)
        self._kwargs = kwargs

    def __str__(self) -> str:
        config = {"data": self._data} | self._kwargs
        return (
            f"{self.__class__.__qualname__}(\n"
            f"  {str_indent(str_pretty_dict(config, sorted_keys=True))}\n)"
        )

    def create(
        self, engine: BaseEngine | None = None, source_inputs: Sequence | None = None
    ) -> IterDataPipe[T] | MapDataPipe[T]:
        return DictBatcher(self._data.create(engine), **self._kwargs)
